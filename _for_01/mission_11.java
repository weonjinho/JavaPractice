package _for_01;

public class mission_11 {

	public static void main(String[] args) {
//		심화문제7:
//		   System.out.println("abc");  
//		   System.out.println("def"); 
//		   // 위코드를 실행하면
//		   abc
//		   def
//	
//		   System.out.print("abc");    // ln이 빠지면 i변수 값을 출력 후 줄바꿈을 하지 않는 코드이다. 
//		   System.out.print("def"); 
//		   // 위코드를 실행하면
//		    abcdef
//	
//		   문제>> 다음과 같이 출력하게 하시오.
//		   1+2+3+4+5+6+7+8+9+10=결과값 
		
//		초기값: 1
//		조건식: i<=10
//		증감식: i++
		
//		코드블록
//		i과 sum의 합을 sum에 저장한다.
//		조건문
//		시나리오:조건이 여러개 있고, 이중 하나를 선택하는 경우.
//		조건식:
//		i가 9이하면 문자열 i뒤에 "+"을 붙이고, i가 10이면 문자열 i뒤에 "+"을 붙인다.
		
//		문자열 구조 분석
//		이 문제를 숫자랑 사칙연산 부호,그리고 대입 연산자로 구성되어있다.
//		원하는 모양으로 출력하려면, i가 10일때 숫자 뒤에 "="을 붙여야한다.
//		i를 문자열화 한다.
//		문자열화된 i를 list변수에 i=9까지는 "+"부호와 함게 저장하고, i=10부터는 "+"부호와 함게 저장한다.
//		list+sum을 출력한다.		
		String list="";
		int sum=0;
		for(int i=1;i<=10;i++) {
			sum+=i;
			if(i==10) {
				list+=Integer.toString(i)+"=";
			}else if(i<=9) {
				list+=Integer.toString(i)+"+";
			}
		}
		System.out.println(list+sum);
		
//		[중요 포인트]
//		1. System.out.print("abc");    // ln이 빠지면 i변수 값을 출력 후 줄바꿈을 하지 않는 코드이다. 
//		문자열과 총합을 구하는 코드를 따로 생각한다.
//		2.String타입에 변수은 ""으로 초기화 할수 있다.
//		3.int ---> String 타입변환 : Integer.toString(int변수);
//		4.문자열 + 숫자 ==> 문자열 + 문자열(<이자-3>p65)
//		String str = "1"+(2+3); ---> String str = "1"+5; ---> String str = "15";
		
		
//		[추가적인 생각]
//		지금은 이 문제를 Java로 해결했지만, 내가 언어에 반복문 문법, 정수타입, 문자열 타입 저장하는 방법만 알아도, 다른 C,C++
//		같은 언어로 이 문제를 해결할 수 있을것 같다.
//		그러 려면 내가 이 문제를 해결하기 위해 정확히 필요한게 무엇인기를 명확해야한다. 
//		"이 문제는 xxx,xxx,xxx외에는 다른 문법 없어도돼!"일 정도로 확신이 있다면, 
//		다른 언어로도 충분히 이 문제를 해결할 수 있다고 본다.
		
		
//		[나의 생각]
//		어느정보까지 하면 문제를 "해결했다!/다 풀었다!"라고 말할수 있을까?
//		나는 코드 한줄 안짜도 된다로 본다.
//		문제를 분해하고 분석해서 각 단계별 해결할 문제가 무엇인지, 어떤 로직으로 해결할 것인지가 정확하고 명확하다면, 
//		나는 "문제를 해결했다"라고 본다.
//		그래서, 분석문은 실제 코드에 몇배의 길이가 되는것은 너무나도 당연한 일이다.
//		분석이 철저해져야, 코드를 어디서 줄일수 있는지가 보이고, 문제를 정확히 분해해야만, 각 새부 문제를 해결하는대있어
//		더 나은 방법을 정확히 적용할 수가 있다. 이러한 새부 문제를 더 간결하고, 필요한 내용만 표현하는 코드로 바꾼다면,
//		불필요한 코드가 줄어들고 최종적으로 종은 코드를 짤수 있다.
		
	}

}
